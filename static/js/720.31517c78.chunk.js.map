{"version":3,"file":"static/js/720.31517c78.chunk.js","mappings":"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","sources":["components/button/button.component.jsx","components/button/button.styles.jsx","components/checkout-item/checkout-item.styles.jsx","components/checkout-item/checkout-item.component.jsx","routes/checkout/checkout.styles.jsx","components/payment-form/payment-form.styles.jsx","components/payment-form/payment-form.component.jsx","routes/checkout/checkout.component.jsx","store/cart/cart.selector.js","store/user/user.selector.js"],"sourcesContent":["import {\r\n  BaseButton,\r\n  GoogleSignInButton,\r\n  InvertedButton,\r\n  DetailsButton,\r\n  ButtonSpinner,\r\n} from \"./button.styles\";\r\n\r\nexport const BUTTON_TYPE_CLASSES = {\r\n  base: \"base\",\r\n  google: \"google-sign-in\",\r\n  inverted: \"inverted\",\r\n  details: \"details\",\r\n};\r\n\r\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base) =>\r\n  ({\r\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\r\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\r\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\r\n    [BUTTON_TYPE_CLASSES.details]: DetailsButton,\r\n  }[buttonType]);\r\n\r\nconst Button = ({ children, buttonType, isLoading, ...otherProps }) => {\r\n  const CustomButton = getButton(buttonType);\r\n  return (\r\n    <CustomButton disabled={isLoading} {...otherProps}>\r\n      {isLoading ? <ButtonSpinner /> : children}\r\n    </CustomButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\nimport { SpinnerContainer } from \"../spinner/spinner.styles\";\r\n\r\nexport const BaseButton = styled.button`\r\n  min-width: 165px;\r\n  width: auto;\r\n  height: 50px;\r\n  letter-spacing: 0.5px;\r\n  line-height: 50px;\r\n  padding: 0 35px 0 35px;\r\n  font-size: 15px;\r\n  background-color: black;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  font-family: \"Open Sans Condensed\";\r\n  font-weight: bolder;\r\n  border: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  &:hover {\r\n    background-color: white;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    min-width: unset;\r\n    padding: 0 15px;\r\n    font-size: 14px;\r\n  }\r\n`;\r\n\r\nexport const GoogleSignInButton = styled(BaseButton)`\r\n  background-color: #4285f4;\r\n  color: white;\r\n\r\n  &:hover {\r\n    background-color: #357ae8;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nexport const InvertedButton = styled(BaseButton)`\r\n  background-color: white;\r\n  color: black;\r\n  border: 1px solid black;\r\n\r\n  &:hover {\r\n    background-color: black;\r\n    color: white;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nexport const DetailsButton = styled(BaseButton)`\r\n  background-color: white;\r\n  color: white;\r\n  border: none;\r\n  padding: 0px;\r\n  border-radius: 4px;\r\n  text-align: center;\r\n  font-size: 16px;\r\n  transition: background-color 0.3s ease, color 0.3s ease;\r\n\r\n  &:hover {\r\n    background-color: #0056b3;\r\n  }\r\n  @media screen and (max-width: 800px) {\r\n    padding: 0px;\r\n  }\r\n`;\r\n\r\nexport const ButtonSpinner = styled(SpinnerContainer)`\r\n  width: 30px;\r\n  height: 30px;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const CheckoutItemContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  min-height: 100px;\r\n  border-bottom: 1px solid darkgrey;\r\n  padding: 15px 0;\r\n  font-size: 20px;\r\n  align-items: center;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    font-size: 15px;\r\n    width: 85vw;\r\n  }\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  width: 23%;\r\n  padding-right: 15px;\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nexport const BaseSpan = styled.span`\r\n  width: 40%;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    font-size: 14px;\r\n\r\n    &:first-child {\r\n      font-size: 11px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Name = styled.span`\r\n  width: 40%;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nexport const Quantity = styled(BaseSpan)`\r\n  display: flex;\r\n`;\r\n\r\nexport const Arrow = styled.div`\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const Value = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nexport const RemoveButton = styled.div`\r\n  padding-left: 12px;\r\n  cursor: pointer;\r\n`;\r\n","import { memo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  addItemToCart,\r\n  clearItemFromCart,\r\n  removeItemFromCart,\r\n} from \"../../store/cart/cart.reducer\";\r\nimport {\r\n  CheckoutItemContainer,\r\n  ImageContainer,\r\n  BaseSpan,\r\n  Quantity,\r\n  Arrow,\r\n  Value,\r\n  RemoveButton,\r\n  Name,\r\n} from \"./checkout-item.styles\";\r\n\r\nconst CheckoutItem = memo(({ cartItem }) => {\r\n  const { name, imageUrl, price, quantity } = cartItem;\r\n  const dispatch = useDispatch();\r\n\r\n  const clearItemHandler = () => dispatch(clearItemFromCart(cartItem));\r\n  const addItemHandler = () => dispatch(addItemToCart(cartItem));\r\n  const removeItemHandler = () => dispatch(removeItemFromCart(cartItem));\r\n\r\n  return (\r\n    <CheckoutItemContainer>\r\n      <ImageContainer>\r\n        <img src={imageUrl} alt={`${name}`} />\r\n      </ImageContainer>\r\n      <Name> {name} </Name>\r\n      <Quantity>\r\n        <Arrow onClick={removeItemHandler}>&#10094;</Arrow>\r\n        <Value>{quantity}</Value>\r\n        <Arrow onClick={addItemHandler}>&#10095;</Arrow>\r\n      </Quantity>\r\n      <BaseSpan> {price} $</BaseSpan>\r\n      <RemoveButton onClick={clearItemHandler}>&#10005;</RemoveButton>\r\n    </CheckoutItemContainer>\r\n  );\r\n});\r\n\r\nexport default CheckoutItem;\r\n","import styled from \"styled-components\";\r\n\r\nexport const CheckoutContainer = styled.div`\r\n  width: 55%;\r\n  min-height: 90vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 50px auto 0;\r\n  @media screen and (max-width: 800px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nexport const CheckoutHeader = styled.div`\r\n  width: 100%;\r\n  padding: 10px 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid darkgrey;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    width: 80vw; //vw - view width (80%)\r\n    font-size: 12px;\r\n  }\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 10.5px;\r\n  }\r\n`;\r\n\r\nexport const HeaderBlock = styled.div`\r\n  text-transform: capitalize;\r\n  width: 23%;\r\n\r\n  &:last-child {\r\n    width: 8%;\r\n  }\r\n  &:nth-child(2) {\r\n    margin-left: -20px;\r\n  }\r\n  &:nth-child(3) {\r\n    margin-left: -50px;\r\n  }\r\n  &:nth-child(4) {\r\n    padding-left: 20px;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    &:first-child {\r\n      margin-left: -15px;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 1130px) {\r\n    &:nth-child(3) {\r\n      margin-left: unset;\r\n    }\r\n    &:nth-child(4) {\r\n      padding-left: 5px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Total = styled.span`\r\n  margin-top: 30px;\r\n  margin-left: auto;\r\n  font-size: 36px;\r\n\r\n  @media screen and (max-width: 800px) {\r\n    font-size: 15px;\r\n    margin-top: 5px;\r\n    padding-left: 120px;\r\n    display: inline-block;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\nimport Button from \"../button/button.component\";\r\n\r\nexport const PaymentFormContainer = styled.div`\r\n  height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding-bottom: 340px;\r\n  padding-top: 50px;\r\n  @media screen and (max-width: 800px) {\r\n    padding: 8px;\r\n    width: 92vw;\r\n    padding-top: 100px;\r\n\r\n    h2 {\r\n      font-size: 11px;\r\n    }\r\n    h3 {\r\n      font-size: 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FormContainer = styled.form`\r\n  width: 100%;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  background-color: #f8f8f8;\r\n  border: 1px solid #ccc;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  font-family: \"Roboto\", sans-serif;\r\n\r\n  h2 {\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    margin-bottom: 20px;\r\n    color: #333;\r\n  }\r\n\r\n  @media screen and (max-width: 800px) {\r\n    h2 {\r\n      font-size: 15px;\r\n      margin-bottom: 12px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const PaymentButton = styled(Button)`\r\n  margin-left: auto;\r\n  margin-top: 30px;\r\n`;\r\n\r\nexport const WarningContainer = styled.div`\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  margin-top: 320px;\r\n  h3 {\r\n    margin: 10px 0;\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  span {\r\n    font-family: \"Roboto\", sans-serif;\r\n    font-size: 18px;\r\n    background-color: #fff;\r\n    padding: 5px 10px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  @media (max-width: 800px) {\r\n    max-width: 100%;\r\n    border: none;\r\n    border-radius: 0;\r\n    box-shadow: none;\r\n    padding: 10px;\r\n    padding-top: 0px;\r\n    margin-top: unset;\r\n\r\n    h3 {\r\n      font-size: 12px;\r\n    }\r\n\r\n    span {\r\n      font-size: 11px;\r\n      display: block;\r\n      margin-bottom: 10px;\r\n      width: 50%;\r\n    }\r\n  }\r\n`;\r\n","import { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { BUTTON_TYPE_CLASSES } from \"../button/button.component\";\r\nimport {\r\n  PaymentFormContainer,\r\n  FormContainer,\r\n  PaymentButton,\r\n  WarningContainer,\r\n} from \"./payment-form.styles\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectCartTotal } from \"../../store/cart/cart.selector\";\r\nimport { selectCurrentUser } from \"../../store/user/user.selector\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { cartReset } from \"../../store/cart/cart.reducer\";\r\n\r\n// Use the options prop to customize the appearance\r\nconst cardElementOptions = {\r\n  style: {\r\n    base: {\r\n      fontSize: \"16px\", // Adjust the font size to make the CardElement text smaller\r\n      \"::placeholder\": {\r\n        color: \"#aab7c4\", // Customize the placeholder color if needed\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nconst PaymentForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const amount = useSelector(selectCartTotal);\r\n  const currentUser = useSelector(selectCurrentUser);\r\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleCartReset = () => {\r\n    dispatch(cartReset());\r\n  };\r\n\r\n  const PaymentHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      return;\r\n    }\r\n    setIsProcessingPayment(true);\r\n    const response = await fetch(\"/.netlify/functions/create-payment-intent\", {\r\n      method: \"post\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ amount: amount * 100 }),\r\n    }).then((res) => res.json());\r\n\r\n    const {\r\n      paymentIntent: { client_secret },\r\n    } = response;\r\n\r\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          name: currentUser ? currentUser.displayName : \"Guest\",\r\n        },\r\n      },\r\n    });\r\n\r\n    setIsProcessingPayment(false);\r\n\r\n    if (paymentResult.error) {\r\n      await Swal.fire({\r\n        title: \"Error in payment\",\r\n        text: paymentResult.error.message,\r\n        icon: \"error\",\r\n        showCloseButton: true,\r\n        showCancelButton: false,\r\n        confirmButtonColor: \"#f44336\",\r\n        confirmButtonText: \"OK\",\r\n      });\r\n    } else {\r\n      if (paymentResult.paymentIntent.status === \"succeeded\") {\r\n        handleCartReset();\r\n\r\n        await Swal.fire({\r\n          title: \"Payment Successful!\",\r\n          text: \"Thanks for your order\",\r\n          icon: \"success\",\r\n          showCloseButton: true,\r\n          showCancelButton: false,\r\n          confirmButtonColor: \"#3085d6\",\r\n          confirmButtonText: \"OK\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PaymentFormContainer>\r\n      <WarningContainer>\r\n        *Please use the following for test credit card payments*\r\n        <h3>VISA: </h3>\r\n        <span>4242 4242 4242 4242</span>\r\n        <h3>Exp: Any Future Date, CVC: Any 3 Digits</h3>\r\n      </WarningContainer>\r\n      <FormContainer onSubmit={PaymentHandler}>\r\n        <h2>Credit Card Payment:</h2>\r\n        <CardElement options={cardElementOptions} />\r\n        <PaymentButton\r\n          isLoading={isProcessingPayment}\r\n          buttonType={BUTTON_TYPE_CLASSES.inverted}\r\n        >\r\n          Pay now\r\n        </PaymentButton>\r\n      </FormContainer>\r\n    </PaymentFormContainer>\r\n  );\r\n};\r\n\r\nexport default PaymentForm;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport CheckoutItem from \"../../components/checkout-item/checkout-item.component\";\r\nimport {\r\n  selectCartItems,\r\n  selectCartTotal,\r\n} from \"../../store/cart/cart.selector\";\r\nimport {\r\n  CheckoutContainer,\r\n  CheckoutHeader,\r\n  HeaderBlock,\r\n  Total,\r\n} from \"./checkout.styles\";\r\nimport PaymentForm from \"../../components/payment-form/payment-form.component\";\r\n\r\nconst Checkout = () => {\r\n  const cartItems = useSelector(selectCartItems);\r\n  const cartTotal = useSelector(selectCartTotal);\r\n\r\n  useEffect(() => {\r\n    // Scroll to the top of the page on render\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <CheckoutContainer>\r\n      <CheckoutHeader>\r\n        <HeaderBlock>\r\n          <span>Product</span>\r\n        </HeaderBlock>\r\n        <HeaderBlock>\r\n          <span>Description</span>\r\n        </HeaderBlock>\r\n        <HeaderBlock>\r\n          <span>Quantity</span>\r\n        </HeaderBlock>\r\n        <HeaderBlock>\r\n          <span>Price</span>\r\n        </HeaderBlock>\r\n        <HeaderBlock>\r\n          <span>Remove</span>\r\n        </HeaderBlock>\r\n      </CheckoutHeader>\r\n      {cartItems.map((cartItem) => (\r\n        <CheckoutItem key={cartItem.id} cartItem={cartItem} />\r\n      ))}\r\n      <Total>Total: {cartTotal} $</Total>\r\n      <PaymentForm />\r\n    </CheckoutContainer>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectCartReducer = (state) => state.cart;\r\n\r\nexport const selectIsCartOpen = createSelector(\r\n  [selectCartReducer],\r\n  (cart) => cart.isCartOpen\r\n);\r\n\r\nexport const selectCartItems = createSelector(\r\n  [selectCartReducer],\r\n  (cart) => cart.cartItems\r\n);\r\n\r\nexport const selectCartTotal = createSelector([selectCartItems], (cartItems) =>\r\n  cartItems.reduce(\r\n    (total, cartItem) => total + cartItem.quantity * cartItem.price,\r\n    0\r\n  )\r\n);\r\n\r\nexport const selectCartCount = createSelector([selectCartItems], (cartItems) =>\r\n  cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0)\r\n);\r\n","export const selectCurrentUser = (state) => state.user.currentUser;\r\n"],"names":["BUTTON_TYPE_CLASSES","base","google","inverted","details","children","buttonType","isLoading","otherProps","CustomButton","BaseButton","GoogleSignInButton","InvertedButton","DetailsButton","getButton","disabled","styled","ButtonSpinner","SpinnerContainer","CheckoutItemContainer","ImageContainer","BaseSpan","Name","Quantity","Arrow","Value","RemoveButton","memo","cartItem","name","imageUrl","price","quantity","dispatch","useDispatch","src","alt","onClick","removeItemFromCart","addItemToCart","clearItemFromCart","CheckoutContainer","CheckoutHeader","HeaderBlock","Total","PaymentFormContainer","FormContainer","PaymentButton","Button","WarningContainer","cardElementOptions","style","fontSize","color","stripe","useStripe","elements","useElements","amount","useSelector","selectCartTotal","currentUser","selectCurrentUser","useState","isProcessingPayment","setIsProcessingPayment","PaymentHandler","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","response","client_secret","paymentIntent","confirmCardPayment","payment_method","card","getElement","CardElement","billing_details","displayName","paymentResult","error","Swal","title","text","message","icon","showCloseButton","showCancelButton","confirmButtonColor","confirmButtonText","status","cartReset","onSubmit","options","cartItems","selectCartItems","cartTotal","useEffect","window","scrollTo","map","id","selectCartReducer","state","cart","selectIsCartOpen","createSelector","isCartOpen","reduce","total","selectCartCount","user"],"sourceRoot":""}